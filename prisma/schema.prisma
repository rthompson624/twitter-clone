// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Tweet {
  id        String    @id @default(uuid())
  userId    String
  content   String    @db.Text
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Like[]
  retweets  Retweet[]
  comments  Comment[]
  images    Image[]

  @@unique([createdAt, id])
  @@index([userId])
}

model Comment {
  id        String   @id @default(uuid())
  tweetId   String
  tweet     Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  content   String   @db.Text

  @@index([tweetId])
  @@index([userId])
}

model Image {
  id        String   @id @default(uuid())
  tweetId   String
  tweet     Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  url       String

  @@index([tweetId])
}

model Like {
  userId  String
  tweetId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet   Tweet  @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  @@id([userId, tweetId])
  @@index([userId])
  @@index([tweetId])
}

model Retweet {
  userId  String
  tweetId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet   Tweet  @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  @@id([userId, tweetId])
  @@index([userId])
  @@index([tweetId])
}

enum NotificationType {
  TWEET_COMMENT
  TWEET_LIKE
  TWEET_RETWEET
  SIBLING_COMMENT
  NEW_FOLLOWER
}

model Notification {
  id           String           @id @default(uuid())
  notifyeeId   String
  notifyerId   String
  resourcePath String
  resourceId   String
  type         NotificationType
  notifyee     User             @relation(name: "Notifyee", fields: [notifyeeId], references: [id], onDelete: Cascade)
  notifyer     User             @relation(name: "Notifyer", fields: [notifyerId], references: [id], onDelete: Cascade)
  createdAt    DateTime         @default(now())

  @@unique([notifyeeId, type, resourceId])
  @@index([notifyeeId])
  @@index([notifyerId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Not related to Next Auth
  tweets                Tweet[]
  likes                 Like[]
  followers             User[]         @relation(name: "Followers")
  follows               User[]         @relation(name: "Followers")
  retweets              Retweet[]
  comments              Comment[]
  notificationsReceived Notification[] @relation(name: "Notifyee")
  notificationsCreated  Notification[] @relation(name: "Notifyer")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
